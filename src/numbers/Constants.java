package numbers;

import operations.Arithmetic;
import operations.Exponential;

public class Constants { // realmente calcular as costantes? (fazer todas igual pi?) // enum? // Number?
	
	/* Attributes */
	
	// usar?
	public static final int SUPER_PRECISION_SCALE = 1037; // 1037 seems enough. Use of Real.scaled() recommended. Press 'More digits' 4 times in WolframAlpha to get 1307 decimal cases.
	
	/* Methods */
	
	/** Principal Constants **/
	
	// 0 ?
	// 1 ?
	
	public static Real pi() { // Pi can be computed using Trigonometry.arctan(1).mult(4) (slow, but quite precise).
		return new Real(
				"3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182"
				);
	}
	
	public static Real pi(int decimalCases) { return pi().scaled(decimalCases); }
	
	public static Real e() { // e can be computed using Exponential.exp(1).
		return new Real(
				"2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901157383418793070215408914993488416750924476146066808226480016847741185374234544243710753907774499206955170276183860626133138458300075204493382656029760673711320070932870912744374704723069697720931014169283681902551510865746377211125238978442505695369677078544996996794686445490598793163688923009879312773617821542499922957635148220826989519366803318252886939849646510582093923982948879332036250944311730123819706841614039701983767932068328237646480429531180232878250981945581530175671736133206981125099618188159304169035159888851934580727386673858942287922849989208680582574927961048419844436346324496848756023362482704197862320900216099023530436994184914631409343173814364054625315209618369088870701676839642437814059271456354906130310720851038375051011574770417189861068739696552126715468895703503540212340784981933432106817012100562788"
				);
	}
	
	public static Real e(int decimalCases) { return e().scaled(decimalCases); }
	
	public static Complex i() { return new Complex(0, 1); }
	
	// numeros primos?
	
	/** Other Constants **/ // usar String, 1307 dígitos = 'More digits' 4 vezes WolframAlpha
	
	public static Real phi() { // (1 + sqrt5) / 2 ?
		try {
			return Arithmetic.quadraticFormula(1, -1, -1, SUPER_PRECISION_SCALE)[0].toReal();
		} catch (Exception ex) { ex.printStackTrace(); return null; }
	}
	
	public static Real omega() { // Default scale used due to computing speed.
		try {
			return Exponential.productLog(new Real(1)); // double?
		} catch (Exception ex) { ex.printStackTrace(); return null; }
	}
	
	// Euler's constant ?
	public static Real gamma() { // ? // scale, iterations // manter? bem imprecisa
		Real result = new Real(0);
		Real previous = result;
		
		for(int n = 1; n < 10000; n++) {
			try {
				result = result.add(
						new Real(1).div(n).subt(Exponential.ln(1.0 + 1.0 / n))
						);
			} catch (Exception ex) { ex.printStackTrace(); return null; }
			if(result.equals(previous)) return result;
			previous = result;
		}
		
		return result;
	}
}
